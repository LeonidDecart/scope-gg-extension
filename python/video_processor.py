#!/usr/bin/env python3
"""
Scope.gg Video Processor
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–π scope.gg
"""

import json
import os
import subprocess
import sys
from pathlib import Path
from typing import List, Dict, Any
import tempfile
import time

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("=" * 60)
    print("üé¨ Scope.gg Video Processor")
    print("=" * 60)
    print("–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–π")
    print("=" * 60)

def get_json_from_user() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:")
    print("–í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞:")
    print("1. –í–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter)")
    print("2. –ù–∞–∂–º–∏—Ç–µ Ctrl+D (Mac/Linux) –∏–ª–∏ Ctrl+Z (Windows)")
    print("-" * 60)
    
    lines = []
    try:
        while True:
            line = input()
            if line.strip() == "":  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥
                break
            lines.append(line)
    except EOFError:
        pass
    
    json_text = '\n'.join(lines).strip()
    
    if not json_text:
        print("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
        sys.exit(1)
    
    try:
        data = json.loads(json_text)
        return data
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        sys.exit(1)

def download_video(url: str, filename: str) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL, –∏—Å–ø–æ–ª—å–∑—É—è curl.
    """
    print(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞—é: {os.path.basename(filename)}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        result = subprocess.run(
            ['curl', '--silent', '--show-error', '--location', '--output', filename, url],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {os.path.basename(filename)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {os.path.basename(filename)}: {result.stderr}")
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(filename):
                os.unlink(filename)
            return False
            
    except FileNotFoundError:
        print("‚ùå curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl.")
        return False
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return False

def is_valid_video(file_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffprobe."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ
        check_cmd = ['ffprobe', '-v', 'error', '-select_streams', 'v:0', '-show_entries', 'stream=codec_type', '-of', 'default=noprint_wrappers=1:nokey=1', file_path]
        result = subprocess.run(check_cmd, capture_output=True, text=True)
        
        if result.returncode == 0 and 'video' in result.stdout:
            return True
        else:
            return False
    except FileNotFoundError:
        print("‚ùå ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ.")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def trim_video(input_file: str, output_file: str) -> bool:
    """–û–±—Ä–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–µ–∫—É–Ω–¥ –∏–∑ –≤–∏–¥–µ–æ"""
    print(f"‚úÇÔ∏è  –û–±—Ä–µ–∑–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–µ–∫—É–Ω–¥—ã: {os.path.basename(input_file)}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        duration_cmd = [
            'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1', input_file
        ]
        
        result = subprocess.run(duration_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {result.stderr}")
            return False
        
        try:
            total_duration = float(result.stdout.strip())
        except (ValueError, IndexError):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Å 7 —Å–µ–∫—É–Ω–¥)
        new_duration = max(0, total_duration - 7)
        
        if new_duration <= 0:
            print(f"‚ö†Ô∏è  –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏")
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å
            subprocess.run(['cp', input_file, output_file], check=True)
        else:
            # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ
            trim_cmd = [
                'ffmpeg', '-y', '-i', input_file,
                '-t', str(new_duration),
                '-c', 'copy', output_file
            ]
            
            result = subprocess.run(trim_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {result.stderr}")
                return False
        
        print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–µ–∑–∞–Ω–æ: {os.path.basename(output_file)}")
        return True
        
    except FileNotFoundError:
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ.")
        return False

def concat_videos(input_files: List[str], output_file: str) -> bool:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ"""
    print(f"üîó –û–±—ä–µ–¥–∏–Ω—è—é {len(input_files)} –≤–∏–¥–µ–æ –≤ {os.path.basename(output_file)}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∏–¥–µ–æ
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            for input_file in input_files:
                f.write(f"file '{os.path.abspath(input_file)}'\n")
            concat_list_file = f.name
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        concat_cmd = [
            'ffmpeg', '-y', '-f', 'concat', '-safe', '0',
            '-i', concat_list_file,
            '-c', 'copy', output_file
        ]
        
        result = subprocess.run(concat_cmd, capture_output=True, text=True)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(concat_list_file)
        
        if result.returncode == 0:
            print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {os.path.basename(output_file)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ.")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    data = get_json_from_user()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if 'clips' not in data or 'povType' not in data:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ 'clips' –∏ 'povType'")
        sys.exit(1)
    
    clips = data['clips']
    pov_type = data['povType']
    
    if not clips:
        print("‚ùå –ù–µ—Ç –∫–ª–∏–ø–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(clips)} –∫–ª–∏–ø–æ–≤ ({pov_type})")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã
    work_dir = Path(f"scope_compilation_{pov_type.replace(' ', '_').lower()}")
    work_dir.mkdir(exist_ok=True)
    
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {work_dir}")
    
    downloaded_files = []
    trimmed_files = []
    
    for i, clip in enumerate(clips, 1):
        order = clip.get('order', i)
        clip_id = clip['clipId']
        url = clip['url']
        title = clip.get('title', f'clip_{clip_id}')
        
        print(f"\nüé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–ª–∏–ø {order}/{len(clips)}: {title}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        downloaded_file = work_dir / f"downloaded_{order:02d}_{clip_id}.mp4"
        if not download_video(url, str(downloaded_file)):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–ª–∏–ø {order} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–º –≤–∏–¥–µ–æ
        if not is_valid_video(str(downloaded_file)):
            print(f"‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–ª–∏–ø {order}.")
            os.unlink(downloaded_file) # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª
            continue
        
        downloaded_files.append(downloaded_file)
        
        # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ (—É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–µ–∫—É–Ω–¥)
        trimmed_file = work_dir / f"trimmed_{order:02d}_{clip_id}.mp4"
        if trim_video(str(downloaded_file), str(trimmed_file)):
            trimmed_files.append(trimmed_file)
        else:
            print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–ª–∏–ø–∞ {order}")
            trimmed_files.append(downloaded_file)
    
    if not trimmed_files:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
        sys.exit(1)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ
    output_filename = work_dir / f"final_compilation_{pov_type.replace(' ', '_').lower()}.mp4"
    
    if len(trimmed_files) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
        os.rename(trimmed_files[0], output_filename)
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {output_filename}")
    else:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
        if concat_videos([str(f) for f in trimmed_files], str(output_filename)):
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {output_filename}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ")
            sys.exit(1)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüßπ –û—á–∏—â–∞—é –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    all_temp_files = downloaded_files + trimmed_files
    for temp_file in all_temp_files:
        if temp_file.exists() and temp_file != output_filename:
            temp_file.unlink()
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {output_filename}")
    print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {work_dir}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
